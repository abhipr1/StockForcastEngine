#!/usr/bin/python
# -*- coding: utf-8 -*-
# events.events_impl.py

'''
@summary: In-memory Python Queue object that stores all of the Event sub-class
          objects that are generated by the rest of the software.
'''

from events import Event
import logging


class MarketEvent(Event):

    """
    Handles the events of receiving a new market update with
    corresponding bars.
    """

    def __init__(self):
        """
        Initializes the MarketEvent.
        """
        self.type = 'MARKET'


class SignalEvent(Event):

    """
    Handles the events of sending a Signal from a Strategy object.
    This is received by a Portfolio object and acted upon.
    """

    def __init__(self, strategy_id, symbol, datetime, signal_type, strength):
        """
        Initialises the SignalEvent.

        :param strategy_id: The unique ID of the strategy sending the signal.
        :param symbol: (str) The ticker symbol, e.g. 'GOOG'.
        :param datetime: (datetime) Timestamp at which the signal was generated.
        :param signal_type: (str) 'LONG' or 'SHORT'.
        :param strength: (int) adjustment factor "suggestion" used to scale
                         quantity at the portfolio level.
        """
        self.strategy_id = strategy_id
        self.type = 'SIGNAL'
        self.symbol = symbol
        self.datetime = datetime
        self.signal_type = signal_type
        self.strength = strength


class OrderEvent(Event):

    """
    Handles the events of sending an Order to an execution system.
    The order contains a symbol (e.g. GOOG), a type (market or limit),
    quantity and a direction.
    """

    def __init__(self, symbol, order_type, quantity, direction):
        """
        Initialises the order type, setting whether it is
        a Market order ('MKT') or Limit order ('LMT'), has
        a quantity (integral) and its direction ('BUY' or
        'SELL').

        :param symbol: (str) The instrument to trade.
        :param order_type: (str) 'MKT' or 'LMT' for Market or Limit.
        :param quantity: (Int) Non-negative integer for quantity.
        :param direction: (str) 'BUY' or 'SELL' for long or short.

        TODO: Must handle error checking here to obtain
        rational orders (i.e. no negative quantities etc).
        """
        self.type = 'ORDER'
        self.symbol = symbol
        self.order_type = order_type
        self.quantity = quantity
        self.direction = direction

    def dump_order(self):
        """
        :return: print output for order
        """
        logging.info("Order: Symbol:{}, Type:{}, Quantity:{}, Direction:{}"
              .format(self.symbol,
                      self.order_type,
                      self.quantity,
                      self.direction))


class FillEvent(Event):

    """
    Encapsulates the notion of a Filled Order, as returned
    from a brokerage. Stores the quantity of an instrument
    actually filled and at what price. In addition, stores
    the commission of the trade from the brokerage.

    TODO: Currently does not support filling positions at
    different prices. This will be simulated by averaging
    the cost.
    """

    def __init__(self, timeindex, symbol, exchange, quantity,
                 direction, fill_cost, commission=None):
        """
        Initialises the FillEvent object. Sets the symbol, exchange,
        quantity, direction, cost of fill and an optional
        commission.

        If commission is not provided, the Fill object will
        calculate it based on the trade size and Interactive
        Brokers fees.

        :param timeindex: The bar-resolution when the order was filled.
        :param symbol: The instrument which was filled.
        :param exchange: The exchange where the order was filled
        :param quantity: The filled quantity.
        :param direction: The direction of fill ('BUY' or 'SELL')
        :param fill_cost: The holdings value in dollars.
        :param commission:  An optional commission sent from IB.
        """
        self.type = 'FILL'
        self.timeindex = timeindex
        self.symbol = symbol
        self.exchange = exchange
        self.quantity = quantity
        self.direction = direction
        self.fill_cost = fill_cost

        # TODO: Update commission later
        # Calculate commission
        if commission is None:
            self.commission = 0.0